<?xml version="1.0" encoding="UTF-8"?>
<!-- 설정파일을 뜻하는 persistence 엘리먼트로 XML 네임스페이스와 사용할 버전을 지정 -->
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" version="2.1">

	<!-- persistence.xml should be put inside an directory called META-INF under the root of the classpath -->
	<!-- 
	    JPA가 설정 정보를 담고 있는 persistence.xml을 인식하게 하기 위해서는 반드시 classpath에 등록된 경로 아래의 META-INF 폴더 안에 작성해야 한다. 
	  -->
	
	<!-- 영속성 유닛(persistence-unit_은 연결할 데이터베이스당 하나의 영속성 유닛을 등록한다. name속성을 통해 고유 이름 부여 -->  
    <persistence-unit name="jpatest">
        <properties>

            <!-- 필수 속성 -->
            <!-- javax.persistence로 시작하는 속성은 JPA 표준 속성으로 특정 구현체에 종속되지 않는다. -->
            <property name="javax.persistence.jdbc.driver" value="oracle.jdbc.driver.OracleDriver"/>
            <property name="javax.persistence.jdbc.user" value="C##OHGIRAFFERS"/>
            <property name="javax.persistence.jdbc.password" value="OHGIRAFFERS"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
            
            <!-- 오라클 데이터베이스 방언 사용 -->
            <property name="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect" />
            
            <!-- 데이터베이스 방언들(여러가지 중에 아래 대표적인 3가지) -->
            <!-- 
            	H2: org.hibernate.dialect.H2Dialect
            	오라클 10g: org.hibernate.dialect.Oracle10gDialect
            	MySQL: org.hibernate.dialect.MySQL5InnoDBDialect
             -->

            <!-- 옵션 -->
            <!-- 실행되는 SQL 보기 -->
            <property name="hibernate.show_sql" value="true" />	<!-- 콘솔에 실행되는 sql을 출력할 수 있다. -->
            <property name="hibernate.format_sql" value="true" />  <!-- 실행되는 SQL 이쁜 포맷으로 보기 -->
            <property name="hibernate.use_sql_comments" value="true" /> <!-- 쿼리 출력 시 추가적인 주석을 표시 -->
            
            <property name="hibernate.id.new_generator_mappings" value="true" /> <!-- JPA 표준에 맞춘 새로운 키 생성 전략 사용 -->
            <!-- 
	            TRUE 일 경우 SequenceStyleGenerator을 지원한다.
					만약 데이터베이스가 시퀀스를 지원한다면, SequenceGenerator 를 사용한다.
					반대로 시퀀스를 지원하지 않는다면 TableGenerator 를 사용한다.
					(MySQL같은 경우는  @GeneratedValue(strategy = GenerationType.IDENTITY)를 사용하게 된다.)
             -->
             
            <property name="hibernate.auto-import" value="false"/> <!-- false로 해야 Entity 어노테이션에 name을 줄 수 있음(같은 클래스명의 entity 구분 용도).-->
        </properties>
    </persistence-unit>

</persistence>