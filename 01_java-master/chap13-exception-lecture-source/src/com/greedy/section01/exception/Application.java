package com.greedy.section01.exception;

public class Application {
	public static void main(String[] args) throws Exception {

		/* 예외처리 */
		/*
		 * 아래 내용은 모두 개념상 예외(예측 가능하고 처리할 수 있는 것)에 대한 내용이다.
		 * 하지만 용어를 에러라는 표현을 쓰게 된다.
		 * 
		 * 자바 프로그램 작성 시 자바 문법(이미 정의된)에 맞지 않는 경우
		 * 코드를 컴파일 하려고 할 때 <컴파일 에러>를 발생시킨다. 엄밀히 말하면 문법상의 오류(Syntax Error)
		 * 이다. 혹은 자바 문법에 맞게 작성하여 컴파일 문제가 없더라도, 실행 시점에 예상치 못하게
		 * 오류가 발생할 수 있다.(<런타임 에러> 또는 예외 흐름에 의한 에러)
		 */
		
		/*
		 * 컴퓨터 프로그램이 동작하는 도중에 예상치 못한 사태가 발생하여
		 * 실행중인 프로그램이 영향을 받는 것을 오류(Error)와 예외(Exception)라는 두가지 개념으로 구분할
		 * 수 있다.
		 * 
		 * 오류(Error)
		 * 시스템 상에서 프로그램에 심각한 문제가 발생하여 실행중인 프로그램이 종료되는 것을 말한다.
		 * 이러한 오류는 개발자가 미리 예측하여 처리하는 것이 불가능하며, 오류에 대한 처리도 할 수 없다.
		 * (ex. JVM 에러, 정전, 컴퓨터 자체 하드웨어적인 문제 등)
		 * 
		 * 예외(Exception)
		 * 오류와 아찬가지로 실행중인 프로그램을 종료시키는 것이 일반적이지만
		 * 발생할 수 있는 상황을 미리 예측하고 처리할 수 있는 미약한 오류를 말한다.
		 * 개발자는 이러한 예외에 대해 예외처리를 하고 예외 상황을 적절히
		 * (비정상적인 종료를 할 수도 있고 그렇지 않게 할 수도 있게)
		 * 처리하여 코드의 흐름을 컨트롤 할 수 있다.
		 */
		
		
		/*
		 * 예외 객체 발생 방법
		 * throw new 예외클래스생성자;	(예외클래스: Exception 클래스를 상속받은 클래스)
		 * 
		 * 예외 처리 방법(예외(Exception)객체 처리 방법)
		 * 1. throws로 위임
		 * 2. try-catch로 직접 처리
		 */
		ExceptionTest et = new ExceptionTest();
		
		et.checkEnoughMoney(10000, 50000);	// main에서 throws로 처리
		
		et.checkEnoughMoney(50000, 10000);	// 예외가 발생하면 메소드는 이 시점에서 return;
											// (JVM이 처리 - e.printStackTrace()를 통한 빨간 글씨 구문 출력 + 강제 종료)
		
		System.out.println("프로그램을 종료합니다.");
	}
}
